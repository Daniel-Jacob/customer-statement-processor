package nl.rabobank.customer.statement.domain.validatorsimport nl.rabobank.customer.statement.domain.CustomerStatementimport nl.rabobank.customer.statement.validators.CustomerStatementValidationErrorimport nl.rabobank.customer.statement.validators.UniqueReferenceValidatorimport org.junit.jupiter.api.Assertions.assertEqualsimport org.junit.jupiter.api.Testimport java.math.BigDecimalinternal class UniqueReferenceValidatorTest {    private val defaultCustomerStatement = CustomerStatement(        reference = "1234",        accountNumber = "NL50ABNA123456789",        description = "this is a description of the mutation",        mutation = "0",        startBalance = BigDecimal.ZERO,        endBalance = BigDecimal.ZERO    )    @Test    fun `should add error on already existing reference`() {        val uniqueReferenceValidator = UniqueReferenceValidator()        val customerStatement = defaultCustomerStatement        val expectedReason = "could not save customer reference since it already exists."        val expected =            listOf(                CustomerStatementValidationError(                    customerStatement.reference,                    customerStatement.description,                    expectedReason                )            )        uniqueReferenceValidator.validate(statement = customerStatement)        val result = uniqueReferenceValidator.validate(statement = customerStatement)        assertEquals(expected, result)    }    @Test    fun `should not add error when reference does not exist`() {        val uniqueReferenceValidator = UniqueReferenceValidator()        val customerStatement = defaultCustomerStatement        val result = uniqueReferenceValidator.validate(statement = customerStatement)        assertEquals(emptyList<CustomerStatementValidationError>(), result)    }}